#!/usr/bin/env bash

# Unoffical Bash "strict mode"
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail
#ORIGINAL_IFS=$IFS
IFS=$'\t\n' # Stricter IFS settings

# shellcheck source=lib/utils.sh
source "$(dirname "$0")/../lib/utils.sh"

install_lua() {
  local install_type="$1"
  local version="$2"
  local install_path="$3"
  local download_path="$4"
  local source_path
  local tmp_download_dir

  # If download path is not set
  if [ -z "$download_path" ]; then
    if [ "${TMPDIR:-}" = "" ]; then
      tmp_download_dir="$(mktemp -d -t lua_build_XXXXXX)"
    else
      tmp_download_dir="${TMPDIR%/}"
    fi

    source_path="$(get_download_file_path "$install_type" "$version" "$tmp_download_dir")"

    download_source "$install_type" "$version" "$source_path"

    download_path="$source_path"
  else
    download_path="$(get_download_file_path "$install_type" "$version" "$download_path")"
  fi

  # Running this in a subshell because we don't to disturb the current
  # working directory.
  (
    cd "$(dirname "$download_path")"
    tar zxvf "$download_path"
    download_dir="$(dirname "$download_path")"

    cd "$(untar_path "$install_type" "$version" "$download_dir")" || exit 1

    # Target is OS-specific
    target="$(get_target)"

    # Build Lua
    if version_5x_or_greater "$version"; then
      make "$target" || exit 1
      make test || exit 1
      make local || exit 1
    else
      make || exit 1
      make install INSTALL_ROOT=install || exit 1
    fi

    # `make local` target changed in version 5x
    if version_5_2x_or_greater "$version"; then
      cp -r install/* "$install_path" || exit 1
    elif version_5x_or_greater "$version"; then
      cp -r ./* "$install_path" || exit 1
    else
      # We install version 4 and lesser in install/
      cp -r install/* "$install_path" || exit 1
    fi

    # If we are installing Lua 5.x or greater install LuaRocks as well
    if version_5x_or_greater "$version"; then
      local luarocks_version
      luarocks_version="${ASDF_LUA_LUAROCKS_VERSION:-$(get_latest_luarocks_version)}"
      local luarocks_name="luarocks-$luarocks_version"
      echo "Installing LuaRocks v${luarocks_version}..."
      curl -L "https://luarocks.org/releases/${luarocks_name}.tar.gz" --output luarocks.tar.gz || exit 1
      tar zxpf luarocks.tar.gz || exit 1
      cd "$luarocks_name" || exit 1
      ./configure --with-lua="$install_path" --with-lua-include="$install_path/include" --with-lua-lib="$install_path/lib" --prefix="$install_path/luarocks" || exit 1
      make bootstrap || exit 1
    fi
  )
}

untar_path() {
  local install_type="$1"
  local version="$2"
  local tmp_download_dir="$3"
  local lua_type
  local lua_version

  lua_type="$(get_lua_type "$version")"
  lua_version="$(get_lua_version "$version")"

  if [ "${lua_type}" = "Lua" ]; then
    if version_5_1x_or_greater "$version"; then
      local dir_name="lua-${lua_version}"
    else
      local dir_name="lua"
    fi
  elif [ "${lua_type}" = "LuaJIT" ]; then
    local dir_name="luajit-${lua_version}"
  fi

  echo "$tmp_download_dir/$dir_name"
}

get_target() {
  os="$(uname -s)"

  # If on OSX (Darwin) then the target is macosx
  if [ "$os" = "Darwin" ]; then
    echo "macosx"
  elif [ "${ASDF_LUA_LINUX_READLINE-}" == "1" ]; then
    echo "linux-readline"
  else # Otherwise we assume Linux
    echo "linux"
  fi
}

version_5x_or_greater() {
  version="$1"
  IFS='.' read -ra version_array <<<"$version"
  major_version="${version_array[0]}"

  if (("$major_version" >= 5)); then
    return 0
  else
    return 1
  fi
}

version_5_1x_or_greater() {
  version="$1"
  IFS='.' read -ra version_array <<<"$version"
  major_minor_version="${version_array[0]}0${version_array[1]}"
  if (("$major_minor_version" >= 501)); then
    return 0
  else
    return 1
  fi
}
version_5_2x_or_greater() {
  version=$1
  IFS='.' read -ra version_array <<<"$version"
  major_minor_version="${version_array[0]}0${version_array[1]}"
  if (("$major_minor_version" >= 502)); then
    return 0
  else
    return 1
  fi
}

install_lua "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH" "$ASDF_DOWNLOAD_PATH"
